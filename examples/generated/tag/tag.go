package tag

// This file is generated by plate. DO NOT EDIT.

import (
	"github.com/cloudspannerecosystem/memefish/ast"
	"github.com/rail44/plate/examples/generated/tables"
	"github.com/rail44/plate/query"
	"github.com/rail44/plate/types"
)

// Column accessors for type-safe column references
func ID() types.Column[tables.Tag, string] {
	return types.Column[tables.Tag, string]{Name: "id"}
}

func Name() types.Column[tables.Tag, string] {
	return types.Column[tables.Tag, string]{Name: "name"}
}

// Select creates a SELECT query for the Tag table
func Select(opts ...types.Option[tables.Tag]) (string, []any) {
	return query.Select(opts...)
}

// Limit adds a LIMIT clause to the query
func Limit(count int) types.QueryOption[tables.Tag] {
	return query.Limit[tables.Tag](count)
}

// OrderBy adds an ORDER BY clause to the query
func OrderBy[V any](column types.Column[tables.Tag, V], dir ast.Direction) types.QueryOption[tables.Tag] {
	return query.OrderBy(column, dir)
}

// And creates an AND condition that groups multiple conditions
func And(opts ...types.ExprOption[tables.Tag]) types.ExprOption[tables.Tag] {
	return query.And(opts...)
}

// Or creates an OR condition from multiple conditions
func Or(opts ...types.ExprOption[tables.Tag]) types.ExprOption[tables.Tag] {
	return query.Or(opts...)
}

// Not creates a logical NOT condition that wraps any ExprOption
func Not(opt types.ExprOption[tables.Tag]) types.ExprOption[tables.Tag] {
	return query.Not(opt)
}

// WithInnerJoin changes the JOIN type to INNER JOIN
func WithInnerJoin() types.QueryOption[tables.Tag] {
	return query.WithInnerJoinOption[tables.Tag]()
}

// WithPosts fetches related Post through post_tag as a nested array of structs
func WithPosts(opts ...types.Option[tables.Post]) types.QueryOption[tables.Tag] {
	return query.WithSubquery[tables.Tag, tables.Post](
		"posts",
		"post",
		query.KeyPair{From: "id", To: "tag_id"},
		true, // array
		"post_tag",
		query.KeyPair{From: "post_id", To: "id"},
		opts...,
	)
}

// WherePosts filters Tag by conditions on its Posts
func WherePosts(opts ...types.Option[tables.Post]) types.ExprOption[tables.Tag] {
	return query.WhereExists[tables.Tag, tables.Post](
		"post",
		query.KeyPair{From: "id", To: "tag_id"},
		"post_tag",
		query.KeyPair{From: "post_id", To: "id"},
		opts...,
	)
}
