// Code generated by plate; DO NOT EDIT.

package user

import (
	"github.com/cloudspannerecosystem/memefish/ast"
	"github.com/rail44/plate/examples/generated/tables"
	"github.com/rail44/plate/query"
	"github.com/rail44/plate/types"
	"time"
)

// Column accessors for type-safe column references
func ID() types.Column[tables.User, string] {
	return types.Column[tables.User, string]{Name: "id"}
}

func Name() types.Column[tables.User, string] {
	return types.Column[tables.User, string]{Name: "name"}
}

func Email() types.Column[tables.User, string] {
	return types.Column[tables.User, string]{Name: "email"}
}

func CreatedAt() types.Column[tables.User, time.Time] {
	return types.Column[tables.User, time.Time]{Name: "created_at"}
}

// Select creates a SELECT query for the User table
func Select(opts ...types.Option[tables.User]) (string, []any) {
	return query.Select(opts...)
}

// Limit adds a LIMIT clause to the query
func Limit(count int) types.QueryOption[tables.User] {
	return query.Limit[tables.User](count)
}

// OrderBy adds an ORDER BY clause to the query
func OrderBy[V any](column types.Column[tables.User, V], dir ast.Direction) types.QueryOption[tables.User] {
	return query.OrderBy(column, dir)
}

// And creates an AND condition that groups multiple conditions
func And(opts ...types.ExprOption[tables.User]) types.ExprOption[tables.User] {
	return query.And(opts...)
}

// Or creates an OR condition from multiple conditions
func Or(opts ...types.ExprOption[tables.User]) types.ExprOption[tables.User] {
	return query.Or(opts...)
}

// Not creates a logical NOT condition that wraps any ExprOption
func Not(opt types.ExprOption[tables.User]) types.ExprOption[tables.User] {
	return query.Not(opt)
}

// WithPosts fetches related Post as a nested array of structs
func WithPosts(opts ...types.Option[tables.Post]) types.QueryOption[tables.User] {
	return query.WithMany[tables.User, tables.Post](
		"posts",
		"post",
		query.KeyPair{From: "id", To: "user_id"},
		opts...,
	)
}

// WherePosts filters User by conditions on its Posts
func WherePosts(opts ...types.Option[tables.Post]) types.ExprOption[tables.User] {
	return query.WhereExists[tables.User, tables.Post](
		"post",
		query.KeyPair{From: "id", To: "user_id"},
		"", // no junction table
		query.KeyPair{},
		opts...,
	)
}
